︠ce8a99bd-973d-4993-bcb6-67373a5d96f4︠
# 1. This exercise is about putting Cayley's Theorem into practice. First, read and study the theorem. Realize that this result by itself is primarily of theoretical interest, but with some more theory we could get into some subtler aspects of this (a subject known as “representation theory”).

# You should create these representations mostly with pencil-and-paper work, using Sage as a fancy calculator and assistant. You do not need to include all these computations in your worksheet. Build the requested group representations and then include enough verifications in Sage to prove that that your representation correctly represents the group.

# Begin by building a permutation representation of the quaternions, Q. There are eight elements in Q (±1,±I,±J,±K), so you will be constructing a subgroup of S8. For each g∈Q form the function Tg, defined as Tg(x)=xg. Notice that this definition is the “reverse” of that given in the text. This is because Sage composes permutations left-to-right, while your text composes right-to-left. To create the permutations Tg, the two-line version of writing permutations could be very useful as an intermediate step. You will probably want to “code” each element of Q with an integer in {1,2,…,8}.

# One such representation is included in Sage as QuaternionGroup() — your answer should look very similar, but perhaps not identical. Do not submit your answer for a representation of the quaternions, but I strongly suggest working this particular group representation until you are sure you have it right — the problems below might be very difficult otherwise. You can use Sage's .is_isomorphic() method to check if your representations are correct. However, do not use this as a substitute for the part of each question that asks you to investigate properties of your representation towards this end.

# Built in the reverse composition order, but anyway, it's still isomorphic to the Quaternion Group
G = SymmetricGroup(8)
Q = G.subgroup(["(1)","(1,2)(3,4)(5,6)(7,8)", "(1,3,2,4)(5,7,6,8)","(1,4,2,3)(5,8,6,7)","(1,5,2,6)(3,8,4,7)","(1,6,2,5)(3,7,4,8)","(1,7,2,8)(3,5,4,6)","(1,8,2,7)(3,6,4,5)"])
Q.list()
Q.is_isomorphic(QuaternionGroup())
︡060d0cc0-8ad0-40bb-9f10-b03bf30e93db︡{"stdout":"[(), (1,2)(3,4)(5,6)(7,8), (1,4,2,3)(5,8,6,7), (1,3,2,4)(5,7,6,8), (1,6,2,5)(3,7,4,8), (1,5,2,6)(3,8,4,7), (1,8,2,7)(3,6,4,5), (1,7,2,8)(3,5,4,6)]\n"}︡{"stdout":"True\n"}︡{"done":true}
︠f9783ba1-df39-4613-9f6f-e3b0519a2dc1s︠
# 1.a. Build the permutation representation of Z2×Z4 described in Cayley's Theorem. (Remember that this group is additive, while the theorem uses multiplicative notation.) Include the representation of each of the 8 elements in your submitted work. Then construct the permutation group as a subgroup of a full symmetric group that is generated by exactly two of the eight elements you have already constructed. Hint: which two elements of Z2×Z4 might you use to generate all of Z2×Z4? Use commands in Sage to investigate various properties of your permutation group, other than just .list(), to provide evidence that your subgroup is correct — include these in your submitted worksheet.
Z2 = CyclicPermutationGroup(2)
Z4 = CyclicPermutationGroup(4)
Z2.list()
Z4.list()
original = direct_product_permgroups([Z2,Z4])
G = SymmetricGroup(8)
representation = ["(1)", "(1,2)(3,4)(5,6)(7,8)", "(1,3,5,7)(2,4,6,8)", "(1,4,5,8)(2,3,6,7)", "(1,5)(2,6)(3,7)(4,8)", "(1,6)(2,5)(3,8)(4,7)", "(1,7,5,3)(2,8,6,4)", "(1,8,5,4)(2,7,6,3)"]
generated = G.subgroup(["(1,2)(3,4)(5,6)(7,8)", "(1,3,5,7)(2,4,6,8)"])
generated.list()
generated.is_isomorphic(original)
sorted([e.order() for e in original])
sorted([e.order() for e in generated])

︡a4ee7b29-019a-4685-aa42-504e57ce9456︡{"stdout":"[(), (1,2)]\n"}︡{"stdout":"[(), (1,2,3,4), (1,3)(2,4), (1,4,3,2)]\n"}︡{"stdout":"[(), (1,2)(3,4)(5,6)(7,8), (1,5)(2,6)(3,7)(4,8), (1,6)(2,5)(3,8)(4,7), (1,7,5,3)(2,8,6,4), (1,8,5,4)(2,7,6,3), (1,3,5,7)(2,4,6,8), (1,4,5,8)(2,3,6,7)]\n"}︡{"stdout":"True\n"}︡{"stdout":"[1, 2, 2, 2, 4, 4, 4, 4]\n"}︡{"stdout":"[1, 2, 2, 2, 4, 4, 4, 4]\n"}︡{"done":true}
︠8500823d-5927-4575-9ae7-e7e8a1460cfc︠
# 1.b. Build a permutation representation of U(24), the group of units mod 24. Again, list a representation of each element in your submitted work. Then construct the group as a subgroup of a full symmetric group created with three generators. To determine these three generators, you will likely need to understand U(24) as an internal direct product. Use commands in Sage to investigate various properties of your group, other than just .list(), to provide evidence that your subgroup is correct — include these in your submitted worksheet.
U24 = Integers(24).list_of_elements_of_multiplicative_group();U24

permuted = []
permutations = []
reference = []
dict = {1:1, 5:2, 7:3, 11:4, 13:5, 17:6, 19:7, 23:8}
for g in U24:
    permuted.append([ZZ(g*u).mod(24) for u in U24])
for p in permuted:
    reference.append([1, 2, 3, 4, 5, 6, 7, 8])
    permutations.append([dict[n] for n in p])

# Print the reference and the permuted symbols to find the permutation
reference
permutations

# Recognise the permutations and type them in by hand
representation = ["(1)", "(1,2)(3,4)(5,6)(7,8)", "(1,3)(2,4)(5,7)(6,8)", "(1,4)(2,3)(5,8)(6,7)", "(1,5)(2,6)(3,7)(4,8)", "(1,6)(2,5)(3,8)(4,7)", "(1,7)(2,8)(3,5)(4,6)", "(1,8)(2,7)(3,6)(4,5)"]

# U24 is the internal direct product of {1,5}, {1,7}, {1,13}
G = SymmetricGroup(8)
generated = G.subgroup(["(1,2)(3,4)(5,6)(7,8)", "(1,3)(2,4)(5,7)(6,8)", "(1,5)(2,6)(3,7)(4,8)"])

# Print the orders of the generated group
sorted([e.order() for e in generated])

# The inverse of every elements is itself, hence, the order of all elements except the identity is two
[inverse_mod(e,24) for e in U24]


︡b2beb5b5-bc26-461f-9c40-bccda94a4053︡{"stdout":"[1, 5, 7, 11, 13, 17, 19, 23]\n"}︡{"stdout":"[[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8]]\n"}︡{"stdout":"[[1, 2, 3, 4, 5, 6, 7, 8], [2, 1, 4, 3, 6, 5, 8, 7], [3, 4, 1, 2, 7, 8, 5, 6], [4, 3, 2, 1, 8, 7, 6, 5], [5, 6, 7, 8, 1, 2, 3, 4], [6, 5, 8, 7, 2, 1, 4, 3], [7, 8, 5, 6, 3, 4, 1, 2], [8, 7, 6, 5, 4, 3, 2, 1]]\n"}︡{"stdout":"[1, 2, 2, 2, 2, 2, 2, 2]\n"}︡{"stdout":"[1, 5, 7, 11, 13, 17, 19, 23]\n"}︡{"done":true}
︠6074ec48-536c-446a-86d3-66092f0ff11f︠
# 2. Consider the symmetries of a 10-gon, D10 in your text, DihedralGroup(10) in Sage. Presume that the vertices of the 10-gon have been labeled 1 through 10 in order. Identify the permutation that is a 180 degree rotation and use it to generate a subgroup R of order 2. Then identify the permutation that is a 72 degree rotation, and any one of the ten permutations that are a reflection of the 10-gon about a line. Use these latter two permutations to generate a subgroup S of order 10. Use Sage to verify that the full dihedral group is the internal direct product of the subgroups R and S by checking the conditions in the definition of an internal direct product.

# We have a theorem which says that if a group is an internal direct product, then it is isomorphic to some external direct product. Understand that this does not mean that you can use the converse in this problem. In other words, establishing an isomorphism of G with an external direct product does not prove that G is an internal direct product.

# Look for 180 and 72 degree rotation
D = DihedralGroup(10)
D.list()
[e.order() for e in D]
rotation_180 = D("(1,6)(2,7)(3,8)(4,9)(5,10)")
R = D.subgroup([rotation_180])
rotation_72 = D("(1,3,5,7,9)(2,4,6,8,10)")
sub_rotation_72 = D.subgroup([rotation_72])
reflection = D("(2,10)(3,9)(4,8)(5,7)")

S = D.subgroup([rotation_72, reflection])
S.order()

# Verify that D = RS
temp_D = sorted([r*s for r in R for s in S])
temp_D == sorted(D.list())

# Verify that the intersection of R and S only contains the identity element
[x for x in R if x in S]

# Verify that RS == SR
temp_D = sorted([s*r for r in R for s in S])
temp_D == sorted(D.list())

︡7662ce7e-cc30-4164-98dd-43cfc9caac93︡{"stdout":"[(), (1,9,7,5,3)(2,10,8,6,4), (1,7,3,9,5)(2,8,4,10,6), (1,5,9,3,7)(2,6,10,4,8), (1,3,5,7,9)(2,4,6,8,10), (1,10,9,8,7,6,5,4,3,2), (1,8,5,2,9,6,3,10,7,4), (1,6)(2,7)(3,8)(4,9)(5,10), (1,4,7,10,3,6,9,2,5,8), (1,2,3,4,5,6,7,8,9,10), (2,10)(3,9)(4,8)(5,7), (1,9)(2,8)(3,7)(4,6), (1,7)(2,6)(3,5)(8,10), (1,5)(2,4)(6,10)(7,9), (1,3)(4,10)(5,9)(6,8), (1,10)(2,9)(3,8)(4,7)(5,6), (1,8)(2,7)(3,6)(4,5)(9,10), (1,6)(2,5)(3,4)(7,10)(8,9), (1,4)(2,3)(5,10)(6,9)(7,8), (1,2)(3,10)(4,9)(5,8)(6,7)]\n"}︡{"stdout":"[1, 5, 5, 5, 5, 10, 10, 2, 10, 10, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"}︡{"stdout":"True\n"}︡{"stdout":"[()]\n"}︡{"stdout":"True\n"}︡{"stdout":"10\n"}︡{"done":true}
︠9931315d-8668-413c-9fed-8e23350425ee︠










