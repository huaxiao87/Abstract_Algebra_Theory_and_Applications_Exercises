︠4ee2e20b-9cba-45df-b425-c831528f57d0︠
# 1. An automorphism is an isomorphism between a group and itself. The identity function (x↦x) is always an isomorphism, which we consider trivial. Use Sage to construct a nontrivial automorphism of the cyclic group of order 12. Check that the mapping is both onto and one-to-one by computing the image and kernel and performing the proper tests on these subgroups. Now construct all of the possible automorphisms of the cyclic group of order 12 without any duplicates.
C12 = CyclicPermutationGroup(12)
C12_gens = [e for e in C12 if e.order()==12]
automorphisms = [ PermutationGroupMorphism(C12, C12, g) for g in C12_gens if g != C12.gens()[0]]

for a in automorphisms:
    a
    k = a.kernel()
    print("Is one-to-one?", k.order() == 1)
    i = a.image(C12)
    print("Is onto?", i.order() == 12)
    print("Is isomorphism?", i.is_isomorphic(C12),"\n")
︡e039fc6f-9a6f-4e58-a557-7cd20f754ca3︡{"stdout":"Permutation group endomorphism of Cyclic group of order 12 as a permutation group\n  Defn: [(1,2,3,4,5,6,7,8,9,10,11,12)] -> [(1,6,11,4,9,2,7,12,5,10,3,8)]\nIs one-to-one? True\nIs onto? True\nIs isomorphism? True \n\nPermutation group endomorphism of Cyclic group of order 12 as a permutation group\n  Defn: [(1,2,3,4,5,6,7,8,9,10,11,12)] -> [(1,8,3,10,5,12,7,2,9,4,11,6)]\nIs one-to-one? True\nIs onto?"}︡{"stdout":" True\nIs isomorphism? True \n\nPermutation group endomorphism of Cyclic group of order 12 as a permutation group\n  Defn: [(1,2,3,4,5,6,7,8,9,10,11,12)] -> [(1,12,11,10,9,8,7,6,5,4,3,2)]\nIs one-to-one? True\nIs onto? True\nIs isomorphism? True \n\n"}︡{"done":true}
︠f9f55062-afec-4f1f-bafd-d96efbb34a8c︠
# 2. The four homomorphisms created by the direct product construction are each an example of a more general construction of homomorphisms involving groups G, H and G×H. By using the same groups as in the example in the previous subsection, see if you can discover and describe these constructions with exact definitions of the four homomorphisms in general. Your tools for investigating a Sage group homomorphism are limited, you might take each generator of the domain and see what its image is. Here is an example of the type of computation you might do repeatedly. We'll investigate the second homomorphism. The domain is the dihedral group, and we will compute the image of the first generator.

# Go to the end of this block to see the description of the homomorphisms
G = CyclicPermutationGroup(4);
print("Generators of G: ", G.gens(), "\n")

H = DihedralGroup(4);
print("Generators of H: ", H.gens(), "\n")

results = G.direct_product(H)
GxH = results[0]

for i in range(len(results)):
    if i==0:
        print("GxH:", results[i])
    else:
        phi = results[i]

        if i==1:
            print("Homomorphism with domain G: ")
            for g in G.gens():
                print(g,"->",phi(g))
        elif i==2:
            print("Homomorphism with domain H: ")
            for h in H.gens():
                print(h,"->",phi(h))
        elif i==3 or i==4:
            print("Homomorphism with domain GxH: ")
            for gxh in GxH.gens():
                print(gxh,"->",phi(gxh))
    print()

# The direct product of G and H is generated by the generators of G and H, and its generators "resemble" those of G and H. The cycles constitute the generators of G are disjointed from those constitue the generators of H.

# The 4 homomorphisms are:
# 1. The homorphism with the domain G, which maps the generators of G to the corresponding generators of GxH
# 2. The homorphism with the domain H, which maps the generators of H to the corresponding generators of GxH
# 3. The homorphism with the domain GxH, which maps the generators of G to identity and maps the generators H to the corresponding generators of GxH
# 4. The homorphism with the domain GxH, which maps the generators of H to identity and maps the generators G to the corresponding generators of GxH

︡1f1ae831-9fb1-47bc-b296-bab7deb1e14e︡{"stdout":"Generators of G:  [(1,2,3,4)] \n\n"}︡{"stdout":"Generators of H:  [(1,2,3,4), (1,4)(2,3)] \n\n"}︡{"stdout":"GxH: Permutation Group with generators [(5,6,7,8), (5,8)(6,7), (1,2,3,4)]\n\nHomomorphism with domain G: \n(1,2,3,4) -> (1,2,3,4)\n\nHomomorphism with domain H: \n(1,2,3,4) -> (5,6,7,8)\n(1,4)(2,3) -> (5,8)(6,7)\n\nHomomorphism with domain GxH: \n(5,6,7,8) -> ()\n(5,8)(6,7) -> ()\n(1,2,3,4) -> (1,2,3,4)\n\nHomomorphism with domain GxH: \n(5,6,7,8) -> (1,2,3,4)\n(5,8)(6,7) -> (1,4)(2,3)\n(1,2,3,4) -> ()\n\n"}︡{"done":true}
︠487a2811-1884-48b5-ab4b-ca42d229178f︠
︡b64225b1-2b67-4194-9beb-1e28aa72007f︡{"done":true}
︠01090d72-221a-4c3b-9f61-1d8e7ad509d6︠
# 3. Consider two groups. The first is the subgroup of S7 generated by (1,2,3) and (4,5,6,7). The second is a subgroup of S12 generated by (1,2,3)(4,5,6)(7,8,9)(10,11,12) and (1,10,7,4)(2,11,8,5)(3,12,9,6). Build these two groups and use the proper Sage command to see that they are isomorphic. Then construct a homomorphism between these two groups that is an isomorphism and include enough details to verify that the mapping is really an isomorphism.

sub_s7 = SymmetricGroup(7).subgroup(["(1,2,3)", "(4,5,6,7)"]);sub_s7
sub_s12 = SymmetricGroup(12).subgroup(["(1,2,3)(4,5,6)(7,8,9)(10,11,12)", "(1,10,7,4)(2,11,8,5)(3,12,9,6)"]);sub_s12
sub_12_gen = sub_s12.gens()

# Reverse the generator list to match with that of sub_s7
sub_12_gen.reverse()
print(sub_12_gen)
phi = PermutationGroupMorphism(sub_s7, sub_s12, sub_12_gen);phi
print("\nIs one-to-one?", len(phi.kernel()) == 1)
print("Is onto?", sub_s7.order() == phi.image(sub_s7).order())

︡310890d3-fd00-4c72-8288-2716b022b457︡{"stdout":"Subgroup generated by [(4,5,6,7), (1,2,3)] of (Symmetric group of order 7! as a permutation group)\n"}︡{"stdout":"Subgroup generated by [(1,2,3)(4,5,6)(7,8,9)(10,11,12), (1,10,7,4)(2,11,8,5)(3,12,9,6)] of (Symmetric group of order 12! as a permutation group)\n"}︡{"stdout":"[(1,10,7,4)(2,11,8,5)(3,12,9,6), (1,2,3)(4,5,6)(7,8,9)(10,11,12)]\n"}︡{"stdout":"Permutation group morphism:\n  From: Subgroup generated by [(4,5,6,7), (1,2,3)] of (Symmetric group of order 7! as a permutation group)\n  To:   Subgroup generated by [(1,10,7,4)(2,11,8,5)(3,12,9,6), (1,2,3)(4,5,6)(7,8,9)(10,11,12)] of (Symmetric group of order 12! as a permutation group)\n  Defn: [(4,5,6,7), (1,2,3)] -> [(1,10,7,4)(2,11,8,5)(3,12,9,6), (1,2,3)(4,5,6)(7,8,9)(10,11,12)]\n"}︡{"stdout":"\nIs one-to-one? True\n"}︡{"stdout":"Is onto?"}︡{"stdout":" True\n"}︡{"done":true}
︠6164b1bb-b614-41e0-b02f-eff2286c2291s︠
# 4. The second paragraph of this chapter informally describes a homomorphism from Sn to Z2, where the even permutations all map to one of the elements and the odd permutations all map to the other element. Replace Sn by S6 and replace Z2 by the permutation version of the cyclic subgroup of order 2, and construct a nontrivial homomorphism between these two groups. Evaluate your homomorphism with enough even and odd permutations to be convinced that it is correct. Then construct the kernel and verify that it is the group you expect.

# Hints: First, decide which elements of the group of order 2 will be associated with even permutations and which will be associated with odd permutations. Then examine the generators of S6 to help decide just how to build the homomorphism.

S6 = SymmetricGroup(6)
Z2 = CyclicPermutationGroup(2)
print("Generators of S6:", S6.gens())
print("Generators of Z2:", Z2.gens())

phi = PermutationGroupMorphism(S6, Z2, ["(1,2)", "(1,2)"])
print("The homomorphism: ", phi)

# This takes very long
print("\n All even permutations are mapped to the identity of Z2?", all([phi(s) == Z2("()") for s in S6 if s.sign() == 1]))
print("\n All odd permutations are mapped to the generator of Z2?", all([phi(s) == Z2("(1,2)") for s in S6 if s.sign() == -1]))
︡6e11c1a1-faf3-4c41-b8a4-9a0766e56676︡{"stdout":"Generators of S6: [(1,2,3,4,5,6), (1,2)]\n"}︡{"stdout":"Generators of Z2: [(1,2)]\n"}︡{"stdout":"The homomorphism:  Permutation group morphism:\n  From: Symmetric group of order 6! as a permutation group\n  To:   Cyclic group of order 2 as a permutation group\n  Defn: [(1,2,3,4,5,6), (1,2)] -> [(1,2), (1,2)]\n"}︡{"stdout":"\n All even permutations are mapped to the identity of Z2?"}︡{"stdout":" True\n"}︡{"stdout":"\n All odd permutations are mapped to the generator of Z2?"}︡{"stdout":" True\n"}︡{"done":true}
︠143fd78f-af48-4c82-83bb-dc7d1decfc85s︠
# 5. The dihedral group D20 has several normal subgroups, as seen below. Each of these is the kernel of a homomorphism with D20 as the domain. For each normal subgroup of D20 construct a homomorphism from D20 to D20 that has the normal subgroup as the kernel. Include in your work verifications that you are creating the desired kernels. There is a pattern to many of these, but the three of order 20 will be a challenge.

D20 = DihedralGroup(20)

# By exercise 10.6.6 we know that any normal subgroup of a dihedral group of order 2N can be exactly described as follows:
# 1. If f divides N, then there must be a subgroup that is a cyclic group generated by the rotation (1,2,...,N)^(N/f)
# 2. Trivially, the dihedral group is its own normal subgroup
# 3. If N is even, then, in addition to the normal subgroups in #1 and #2, it also has:
#     a. a normal subgroup generated by (1,2,…,N)^2 and a reflection over a line through vertices
#     b. a normal subgroup generated by (1,2,…,N)^2 and a reflection over a line through edges
def subgroup_compare(parent, sub1, sub2):
    sorted_s1 = sorted([sorted(parent(s1)) for s1 in sub1.list()])
    sorted_s2 = sorted([sorted(parent(s2)) for s2 in sub2.list()])
    return sorted_s1 == sorted_s2

R = D20.gens()[0]
S = D20.gens()[1]

for sub in D20.normal_subgroups():
    order = sub.order()
    id = D20("()")
    print("\nSubgroup order: ", order)
    if order == 40:
        image_generators = [id, id]
        phi = PermutationGroupMorphism(D20, D20, image_generators)

    else:
        sub_rotation = R^order
        image_generators = [sub_rotation, S]
        phi = PermutationGroupMorphism(D20, D20, image_generators)

        if order == 20 and not subgroup_compare(D20, sub, phi.kernel()):
            image_generators = [S, id]
            phi = PermutationGroupMorphism(D20, D20, image_generators)

            if order == 20 and not subgroup_compare(D20, sub, phi.kernel()):
                image_generators = [S, S]
                phi = PermutationGroupMorphism(D20, D20, image_generators)
    print("Image generators: ", image_generators)
    print("Kernel is the same as the normal subgroup? ", subgroup_compare(D20, sub, phi.kernel()))



︡d994b99a-adb6-44ed-b9e5-ef69e544611f︡{"stdout":"\nSubgroup order:  40\nImage generators:  [(), ()]\nKernel is the same as the normal subgroup? "}︡{"stdout":" True\n\nSubgroup order:  20\nImage generators:  [(), (1,20)(2,19)(3,18)(4,17)(5,16)(6,15)(7,14)(8,13)(9,12)(10,11)]\nKernel is the same as the normal subgroup? "}︡{"stdout":" True\n\nSubgroup order:  20\nImage generators: "}︡{"stdout":" [(1,20)(2,19)(3,18)(4,17)(5,16)(6,15)(7,14)(8,13)(9,12)(10,11), ()]\nKernel is the same as the normal subgroup? "}︡{"stdout":" True\n\nSubgroup order:  20\nImage generators: "}︡{"stdout":" [(1,20)(2,19)(3,18)(4,17)(5,16)(6,15)(7,14)(8,13)(9,12)(10,11), (1,20)(2,19)(3,18)(4,17)(5,16)(6,15)(7,14)(8,13)(9,12)(10,11)]\nKernel is the same as the normal subgroup? "}︡{"stdout":" True\n\nSubgroup order:  10\nImage generators:  [(1,11)(2,12)(3,13)(4,14)(5,15)(6,16)(7,17)(8,18)(9,19)(10,20), (1,20)(2,19)(3,18)(4,17)(5,16)(6,15)(7,14)(8,13)(9,12)(10,11)]\nKernel is the same as the normal subgroup? "}︡{"stdout":" True\n\nSubgroup order:  4\nImage generators:  [(1,5,9,13,17)(2,6,10,14,18)(3,7,11,15,19)(4,8,12,16,20), (1,20)(2,19)(3,18)(4,17)(5,16)(6,15)(7,14)(8,13)(9,12)(10,11)]\nKernel is the same as the normal subgroup? "}︡{"stdout":" True\n\nSubgroup order:  2\nImage generators:  [(1,3,5,7,9,11,13,15,17,19)(2,4,6,8,10,12,14,16,18,20), (1,20)(2,19)(3,18)(4,17)(5,16)(6,15)(7,14)(8,13)(9,12)(10,11)]\nKernel is the same as the normal subgroup?  True\n\nSubgroup order:  5\nImage generators:  [(1,6,11,16)(2,7,12,17)(3,8,13,18)(4,9,14,19)(5,10,15,20), (1,20)(2,19)(3,18)(4,17)(5,16)(6,15)(7,14)(8,13)(9,12)(10,11)]\nKernel is the same as the normal subgroup? "}︡{"stdout":" True\n\nSubgroup order:  1\nImage generators:  [(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20), (1,20)(2,19)(3,18)(4,17)(5,16)(6,15)(7,14)(8,13)(9,12)(10,11)]\nKernel is the same as the normal subgroup?  True\n"}︡{"done":true}
︠afa15158-fa0f-45ff-834c-6b5aa929de96︠
︡59992f36-3056-43a2-b4b1-550ea578fa18︡{"done":true}
︠219e3218-cdc3-4aa2-b3d8-94f61a910005︠

︡8137f9bf-a51e-40c3-9c49-e486036e10ad︡{"done":true}









