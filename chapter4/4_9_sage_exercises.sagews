︠64ce15b8-b7b3-4c47-8b42-4fc1baef2ea5s︠
#1. Execute the statement R = Integers(40) to create the set [0,1,2,...,39]This is a group under addition mod 40, which we will ignore. Instead we are interested in the subset of elements which have an inverse under multiplication mod 40. Determine how big this subgroup is by executing the command R.unit_group_order(), and then obtain a list of these elements with R.list_of_elements_of_multiplicative_group().

R = Integers(40);R
R.unit_group_order()
R.list_of_elements_of_multiplicative_group()
︡e660fede-cbb1-47bc-850f-d1883cd1bca1︡{"stdout":"Ring of integers modulo 40\n"}︡{"stdout":"16\n"}︡{"stdout":"[1, 3, 7, 9, 11, 13, 17, 19, 21, 23, 27, 29, 31, 33, 37, 39]\n"}︡{"done":true}
︠662a7e5a-8b1d-4df2-adf3-e8ae299b9cf3s︠
#2. You can create elements of this group by coercing regular integers into U, such as with the statement a = U(7). (Don't confuse this with our mathematical notation U(40).) This will tell Sage that you want to view 7 as an element of U, subject to the corresponding operations. Determine the elements of the cyclic subgroup of U generated by 7 with a list comprehension as follows:
R = Integers(40)
a = R(7)
[a^i for i in srange(16)]
a.order()

︡3795326b-f805-4c10-a996-ab71e803f6a4︡{"stdout":"[1, 7, 9, 23, 1, 7, 9, 23, 1, 7, 9, 23, 1, 7, 9, 23]\n"}︡{"stdout":"40\n"}︡{"done":true}
︠9ec93fc7-9853-4c9b-906e-d14d6662d534s︠
#3. The group U(49) is cyclic. Using only the Sage commands described previously, use Sage to find a generator for this group. Now using only theorems about the structure of cyclic groups, describe each of the subgroups of U(49) by specifying its order and by giving an explicit generator. Do not repeat any of the subgroups — in other words, present each subgroup exactly once. You can use Sage to check your work on the subgroups, but your answer about the subgroups should rely only on theorems and be a nicely written paragraph with a table, etc.
R = Integers(49)
C = R.list_of_elements_of_multiplicative_group()
order = R.unit_group_order()
for e in C:
    a = R(e)
    cyclic_subgroup = [a^i for i in srange(order)]
    intersection = list(set(cyclic_subgroup)&set(C))
    if len(intersection)== order:
        a
        break
︡86c8681d-c744-4f29-ada5-d39c5d4c3d52︡{"stdout":"3\n"}︡{"done":true}
︠2dd051af-c74a-4cfb-ae47-fc55ebcbf08ds︠
#4. The group U(35) is not cyclic. Again, using only the Sage commands described previously, use computations to provide irrefutable evidence of this. How many of the 16 different subgroups of U(35) can you list?
R = Integers(35)
C = R.list_of_elements_of_multiplicative_group()
order = R.unit_group_order();
print("The order of the unit group:", order)
num_non_generator_elements = 0
for e in C:
    a = R(e)
    cyclic_subgroup = [a^i for i in srange(order)]
    intersection = list(set(cyclic_subgroup)&set(C))
    if len(intersection)!= order:
        num_non_generator_elements += 1
print("Total number of non-generator elements:",num_non_generator_elements)
# R.multiplicative_subgroups() #here we DO NOT ONLY use the command described previously
︡d9ca6d28-2f59-41b2-bb78-60825f56c3e9︡{"stdout":"The order of the unit group: 24\n"}︡{"stdout":"Total number of non-generator elements: 24\n"}︡{"done":true}
#5. Again, using only the Sage commands described previously, explore the structure of U(n) for various values of n and see if you can formulate an interesting conjecture about some basic property of this group. (Yes, this is a very open-ended question, but this is ultimately the real power of exploring mathematics with Sage.)









